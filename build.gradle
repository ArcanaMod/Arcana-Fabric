plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { name = 'Ladysnake Mods'
            url = 'https://ladysnake.jfrog.io/artifactory/mods' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:4.0.1"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:3.1.1" // Remove if we don't need it.
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:4.0.1" // Aspects
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:4.0.1" // Wands

    // Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:4.0.1"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:3.1.1"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:4.0.1"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:4.0.1"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}
jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
    repositories {
    }
}
